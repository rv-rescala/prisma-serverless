scalar AWSTime

scalar AWSDateTime

scalar AWSTimestamp

scalar AWSEmail

scalar AWSJSON

scalar AWSURL

scalar AWSPhone

scalar AWSIPAddress

directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION

directive @deprecated(reason: String!) on INPUT_FIELD_DEFINITION | ENUM

directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION

directive @aws_api_key on FIELD_DEFINITION | OBJECT

directive @aws_iam on FIELD_DEFINITION | OBJECT

directive @aws_oidc on FIELD_DEFINITION | OBJECT

directive @aws_cognito_user_pools(cognito_groups: [String!]) on FIELD_DEFINITION | OBJECT

type Query {
  listLatestTransactionHistory: [TransactionHistory!]!
  getTransactionHistory(id: ID!): TransactionHistory
  listTransactionHistory(filter: TableTransactionHistoryFilterInput, limit: Int, nextToken: String): TransactionHistoryConnection
  getUserHistory(id: ID!): UserHistory
  listUserHistories(filter: TableUserHistoryFilterInput, limit: Int, nextToken: String): UserHistoryConnection
  """Find a single User record by unique identifier."""
  getUser(where: UserWhereUniqueInput!): User @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Find many User records (optional query filters)."""
  listUsers(where: UserWhereInput, orderBy: [UserOrderByInput], skip: Int, take: Int): [User] @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Count all User records (optional query filters)."""
  countUsers(where: UserWhereInput, orderBy: [UserOrderByInput], skip: Int, take: Int): Int @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Find a single UserInfo record by unique identifier."""
  getUserInfo(where: UserInfoWhereUniqueInput!): UserInfo @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Find many UserInfo records (optional query filters)."""
  listUserInfos(where: UserInfoWhereInput, orderBy: [UserInfoOrderByInput], skip: Int, take: Int): [UserInfo] @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Count all UserInfo records (optional query filters)."""
  countUserInfos(where: UserInfoWhereInput, orderBy: [UserInfoOrderByInput], skip: Int, take: Int): Int @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createTransactionHistory(input: CreateTransactionHistoryInput!): TransactionHistory
  deleteTransactionHistory(input: DeleteTransactionHistoryInput!): TransactionHistory
  updateTransactionHistory(input: UpdateTransactionHistoryInput!): TransactionHistory
  createUserHistory(input: CreateUserHistoryInput!): UserHistory
  deleteUserHistory(input: DeleteUserHistoryInput!): UserHistory
  updateUserHistory(input: UpdateUserHistoryInput!): UserHistory
  """Create a new single User record."""
  createUser(data: UserCreateInput!): User @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Create multiple new User records."""
  createManyUsers(data: [UserCreateManyInput!], skipDuplicates: Boolean): BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Update an existing single User record."""
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput): User @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Update multiple existing User records."""
  updateManyUsers(where: UserWhereInput!, data: UserUpdateInput): BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Update an existing or create a new single User record."""
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Delete a single User record."""
  deleteUser(where: UserWhereUniqueInput!): User @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Delete multiple User records."""
  deleteManyUsers(where: UserWhereInput!): BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Create a new single UserInfo record."""
  createUserInfo(data: UserInfoCreateInput!): UserInfo @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Create multiple new UserInfo records."""
  createManyUserInfos(data: [UserInfoCreateManyInput!], skipDuplicates: Boolean): BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Update an existing single UserInfo record."""
  updateUserInfo(where: UserInfoWhereUniqueInput!, data: UserInfoUpdateInput, operation: UserInfoOperationInput): UserInfo @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Update multiple existing UserInfo records."""
  updateManyUserInfos(where: UserInfoWhereInput!, data: UserInfoUpdateInput, operation: UserInfoOperationInput): BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Update an existing or create a new single UserInfo record."""
  upsertUserInfo(create: UserInfoCreateInput!, update: UserInfoUpdateInput!, where: UserInfoWhereUniqueInput!): UserInfo @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Delete a single UserInfo record."""
  deleteUserInfo(where: UserInfoWhereUniqueInput!): UserInfo @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Delete multiple UserInfo records."""
  deleteManyUserInfos(where: UserInfoWhereInput!): BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
}

type Subscription {
  onCreateTransactionHistory(id: ID, comment: String): TransactionHistory @aws_subscribe(mutations: ["createTransactionHistory"])
  onDeleteTransactionHistory(id: ID, comment: String): TransactionHistory @aws_subscribe(mutations: ["deleteTransactionHistory"])
  onUpdateTransactionHistory(id: ID, comment: String): TransactionHistory @aws_subscribe(mutations: ["updateTransactionHistory"])
  onCreateUserHistory(id: ID, message: String, title: String): UserHistory @aws_subscribe(mutations: ["createUserHistory"])
  onDeleteUserHistory(id: ID, message: String, title: String): UserHistory @aws_subscribe(mutations: ["deleteUserHistory"])
  onUpdateUserHistory(id: ID, message: String, title: String): UserHistory @aws_subscribe(mutations: ["updateUserHistory"])
  """
  Triggered from `createUser` mutation (excl. `createManyUsers` and `upsertUser`).
  """
  onCreatedUser(cognitoid: String, username: String): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """
  Triggered from `updateUser` mutation (excl. `updateManyUsers` and `upsertUser`).
  """
  onUpdatedUser(cognitoid: String, username: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `upsertUser` mutation."""
  onUpsertedUser(cognitoid: String, username: String): User @aws_subscribe(mutations: ["upsertUser"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `deleteUser` mutation (excl. `deleteManyUsers`)."""
  onDeletedUser(cognitoid: String, username: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from ANY SINGLE record mutation."""
  onMutatedUser(cognitoid: String, username: String): User @aws_subscribe(mutations: ["createUser", "updateUser", "upsertUser", "deleteUser"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `createManyUsers` mutation."""
  onCreatedManyUsers: BatchPayload @aws_subscribe(mutations: ["createManyUsers"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `updateManyUsers` mutation."""
  onUpdatedManyUsers: BatchPayload @aws_subscribe(mutations: ["updateManyUsers"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from ANY MULTIPLE records mutation."""
  onMutatedManyUsers: BatchPayload @aws_subscribe(mutations: ["createManyUsers", "updateManyUsers", "deleteManyUsers"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `deleteManyUsers` mutation."""
  onDeletedManyUsers: BatchPayload @aws_subscribe(mutations: ["deleteManyUsers"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """
  Triggered from `createUserInfo` mutation (excl. `createManyUserInfos` and `upsertUserInfo`).
  """
  onCreatedUserInfo(id: Int): UserInfo @aws_subscribe(mutations: ["createUserInfo"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """
  Triggered from `updateUserInfo` mutation (excl. `updateManyUserInfos` and `upsertUserInfo`).
  """
  onUpdatedUserInfo(id: Int): UserInfo @aws_subscribe(mutations: ["updateUserInfo"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `upsertUserInfo` mutation."""
  onUpsertedUserInfo(id: Int): UserInfo @aws_subscribe(mutations: ["upsertUserInfo"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """
  Triggered from `deleteUserInfo` mutation (excl. `deleteManyUserInfos`).
  """
  onDeletedUserInfo(id: Int): UserInfo @aws_subscribe(mutations: ["deleteUserInfo"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from ANY SINGLE record mutation."""
  onMutatedUserInfo(id: Int): UserInfo @aws_subscribe(mutations: ["createUserInfo", "updateUserInfo", "upsertUserInfo", "deleteUserInfo"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `createManyUserInfos` mutation."""
  onCreatedManyUserInfos: BatchPayload @aws_subscribe(mutations: ["createManyUserInfos"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `updateManyUserInfos` mutation."""
  onUpdatedManyUserInfos: BatchPayload @aws_subscribe(mutations: ["updateManyUserInfos"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from ANY MULTIPLE records mutation."""
  onMutatedManyUserInfos: BatchPayload @aws_subscribe(mutations: ["createManyUserInfos", "updateManyUserInfos", "deleteManyUserInfos"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
  """Triggered from `deleteManyUserInfos` mutation."""
  onDeletedManyUserInfos: BatchPayload @aws_subscribe(mutations: ["deleteManyUserInfos"]) @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"])
}

type TransactionHistory {
  id: ID!
  comment: String
}

type TransactionHistoryConnection {
  items: [TransactionHistory]
  nextToken: String
}

input CreateTransactionHistoryInput {
  comment: String
}

input DeleteTransactionHistoryInput {
  id: ID!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableTransactionHistoryFilterInput {
  id: TableIDFilterInput
  comment: TableStringFilterInput
}

input UpdateTransactionHistoryInput {
  id: ID!
  comment: String
}

type UserHistory {
  id: ID!
  message: String
  title: String
}

type UserHistoryConnection {
  items: [UserHistory]
  nextToken: String
}

input CreateUserHistoryInput {
  message: String
  title: String
}

input DeleteUserHistoryInput {
  id: ID!
}

input TableUserHistoryFilterInput {
  id: TableIDFilterInput
  message: TableStringFilterInput
  title: TableStringFilterInput
}

input UpdateUserHistoryInput {
  id: ID!
  message: String
  title: String
}

type User @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"]) {
  cognitoid: String!
  group: String!
  username: String!
  userInfo: [UserInfo]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserInfo @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"]) {
  id: Int!
  cognitoid: String!
  status: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User!
}

type BatchPayload @aws_api_key @aws_cognito_user_pools(cognito_groups: ["user", "admin"]) {
  count: Int
}

enum OrderByArg {
  ASC
  DESC
}

enum NullArg {
  NULL
}

input UserFilter {
  some: UserWhereInputWithoutNullables
  every: UserWhereInputWithoutNullables
  none: UserWhereInputWithoutNullables
}

input UserWhereInputWithoutNullables {
  OR: [UserWhereInput]
  NOT: [UserWhereInput]
  AND: [UserWhereInput]
  cognitoid: StringFilter
  group: StringFilter
  username: StringFilter
  userInfo: UserInfoFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
}

input UserWhereInput {
  is: NullArg
  isNot: NullArg
  OR: [UserWhereInput]
  NOT: [UserWhereInput]
  AND: [UserWhereInput]
  cognitoid: StringFilter
  group: StringFilter
  username: StringFilter
  userInfo: UserInfoFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
}

input UserScalarWhereInput {
  OR: [UserScalarWhereInput]
  NOT: [UserScalarWhereInput]
  AND: [UserScalarWhereInput]
  cognitoid: StringFilter
  group: StringFilter
  username: StringFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
}

input UserWhereUniqueInput {
  cognitoid: String
  username: String
}

input UserExtendedWhereUniqueInput {
  OR: [UserWhereInput]
  NOT: [UserWhereInput]
  AND: [UserWhereInput]
  cognitoid: String
  group: StringFilter
  username: String
  userInfo: UserInfoFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
}

input UserOrderByInput {
  cognitoid: OrderByArg
  group: OrderByArg
  username: OrderByArg
  userInfo: UserInfoOrderByInput
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

input UserCreateInput {
  cognitoid: String!
  group: String!
  username: String!
  userInfo: UserUserInfoCreateNestedInput
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UserCreateManyInput {
  cognitoid: String!
  group: String!
  username: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UserUpdateInput {
  cognitoid: String
  group: String
  username: String
  userInfo: UserUserInfoUpdateNestedInput
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UserUpdateUniqueInput {
  data: UserUpdateInput!
  where: UserWhereUniqueInput!
}

input UserUpdateManyInput {
  where: UserScalarWhereInput!
  data: UserUpdateInput!
}

input UserUpsertInput {
  create: UserCreateInput!
  update: UserUpdateInput!
}

input UserUpsertUniqueInput {
  where: UserWhereUniqueInput!
  create: UserCreateInput!
  update: UserUpdateInput!
}

input UserConnectOrCreateInput {
  where: UserWhereUniqueInput!
  create: UserCreateInput!
}

input UserUserInfoCreateNestedInput {
  create: [UserInfoCreateInput]
  connect: [UserInfoWhereUniqueInput]
  connectOrCreate: [UserInfoConnectOrCreateInput]
}

input UserUserInfoUpdateNestedInput {
  connect: [UserInfoWhereUniqueInput]
  create: [UserInfoCreateInput]
  connectOrCreate: [UserInfoConnectOrCreateInput]
  update: [UserInfoUpdateUniqueInput]
  upsert: [UserInfoUpsertUniqueInput]
  delete: [UserInfoWhereUniqueInput]
  disconnect: [UserInfoWhereUniqueInput]
  deleteMany: [UserInfoScalarWhereInput]
  set: [UserInfoWhereUniqueInput]
  updateMany: [UserInfoUpdateManyInput]
}

input UserInfoFilter {
  some: UserInfoWhereInputWithoutNullables
  every: UserInfoWhereInputWithoutNullables
  none: UserInfoWhereInputWithoutNullables
}

input UserInfoWhereInputWithoutNullables {
  OR: [UserInfoWhereInput]
  NOT: [UserInfoWhereInput]
  AND: [UserInfoWhereInput]
  id: IntFilter
  cognitoid: StringFilter
  status: StringNullableFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
  user: UserWhereInput
}

input UserInfoWhereInput {
  is: NullArg
  isNot: NullArg
  OR: [UserInfoWhereInput]
  NOT: [UserInfoWhereInput]
  AND: [UserInfoWhereInput]
  id: IntFilter
  cognitoid: StringFilter
  status: StringNullableFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
  user: UserWhereInput
}

input UserInfoScalarWhereInput {
  OR: [UserInfoScalarWhereInput]
  NOT: [UserInfoScalarWhereInput]
  AND: [UserInfoScalarWhereInput]
  id: IntFilter
  cognitoid: StringFilter
  status: StringNullableFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
}

input UserInfoWhereUniqueInput {
  id: Int
}

input UserInfoExtendedWhereUniqueInput {
  OR: [UserInfoWhereInput]
  NOT: [UserInfoWhereInput]
  AND: [UserInfoWhereInput]
  id: Int
  cognitoid: StringFilter
  status: StringNullableFilter
  createdAt: AWSDateTimeFilter
  updatedAt: AWSDateTimeFilter
  user: UserWhereInput
}

input UserInfoOrderByInput {
  id: OrderByArg
  cognitoid: OrderByArg
  status: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  user: UserOrderByInput
}

input UserInfoCreateInput {
  id: Int
  status: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: UserInfoUserCreateNestedInput!
}

input UserInfoCreateManyInput {
  id: Int
  status: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UserInfoUpdateInput {
  id: Int
  status: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: UserInfoUserUpdateNestedInput
}

input UserInfoOperationInput {
  id: IntOperation
}

input UserInfoUpdateUniqueInput {
  data: UserInfoUpdateInput!
  where: UserInfoWhereUniqueInput!
}

input UserInfoUpdateManyInput {
  where: UserInfoScalarWhereInput!
  data: UserInfoUpdateInput!
}

input UserInfoUpsertInput {
  create: UserInfoCreateInput!
  update: UserInfoUpdateInput!
}

input UserInfoUpsertUniqueInput {
  where: UserInfoWhereUniqueInput!
  create: UserInfoCreateInput!
  update: UserInfoUpdateInput!
}

input UserInfoConnectOrCreateInput {
  where: UserInfoWhereUniqueInput!
  create: UserInfoCreateInput!
}

input UserInfoUserCreateNestedInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  connectOrCreate: UserConnectOrCreateInput
}

input UserInfoUserUpdateNestedInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  connectOrCreate: UserConnectOrCreateInput
  update: UserUpdateInput
  upsert: UserUpsertInput
  delete: Boolean
  disconnect: Boolean
}

input IntOperation {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input FloatOperation {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input AWSDateTimeFilter {
  equals: AWSDateTime
  gt: AWSDateTime
  gte: AWSDateTime
  in: [AWSDateTime!]
  lt: AWSDateTime
  lte: AWSDateTime
  not: AWSDateTimeFilter
  notIn: [AWSDateTime!]
}

input AWSDateTimeNullableFilter {
  equals: AWSDateTime
  gt: AWSDateTime
  gte: AWSDateTime
  in: [AWSDateTime!]
  lt: AWSDateTime
  lte: AWSDateTime
  not: AWSDateTimeFilter
  notIn: [AWSDateTime!]
  isNull: Boolean
}

input AWSDateTimeListFilter {
  equals: [AWSDateTime!]
  has: AWSDateTime
  hasEvery: [AWSDateTime!]
  hasSome: [AWSDateTime!]
  isEmpty: Boolean
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: FloatFilter
  notIn: [Float!]
  isNull: Boolean
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: FloatFilter
  notIn: [Float!]
  isNull: Boolean
}

input FloatListFilter {
  equals: [Float!]
  has: Float
  hasEvery: [Float!]
  hasSome: [Float!]
  isEmpty: Boolean
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
  isNull: Boolean
}

input IntListFilter {
  equals: [Int!]
  has: Int
  hasEvery: [Int!]
  hasSome: [Int!]
  isEmpty: Boolean
}

input AWSJSONFilter {
  contains: String
  endsWith: String
  equals: AWSJSON
  in: [AWSJSON!]
  not: AWSJSONFilter
  notIn: [AWSJSON!]
  startsWith: String
}

input AWSJSONNullableFilter {
  contains: String
  endsWith: String
  equals: AWSJSON
  in: [AWSJSON!]
  not: AWSJSONFilter
  notIn: [AWSJSON!]
  startsWith: String
  isNull: Boolean
}

input AWSJSONListFilter {
  equals: [AWSJSON!]
  has: AWSJSON
  hasEvery: [AWSJSON!]
  hasSome: [AWSJSON!]
  isEmpty: Boolean
}

input AWSEmailFilter {
  contains: String
  endsWith: String
  equals: AWSEmail
  in: [AWSEmail!]
  not: AWSEmailFilter
  notIn: [AWSEmail!]
  startsWith: String
}

input AWSEmailNullableFilter {
  contains: String
  endsWith: String
  equals: AWSEmail
  in: [AWSEmail!]
  not: AWSEmailFilter
  notIn: [AWSEmail!]
  startsWith: String
  isNull: Boolean
}

input AWSEmailListFilter {
  equals: [AWSEmail!]
  has: AWSEmail
  hasEvery: [AWSEmail!]
  hasSome: [AWSEmail!]
  isEmpty: Boolean
}

input AWSURLFilter {
  contains: String
  endsWith: String
  equals: AWSURL
  in: [AWSURL!]
  not: AWSURLFilter
  notIn: [AWSURL!]
  startsWith: String
}

input AWSURLNullableFilter {
  contains: String
  endsWith: String
  equals: AWSURL
  in: [AWSURL!]
  not: AWSURLFilter
  notIn: [AWSURL!]
  startsWith: String
  isNull: Boolean
}

input AWSURLListFilter {
  equals: [AWSURL!]
  has: AWSURL
  hasEvery: [AWSURL!]
  hasSome: [AWSURL!]
  isEmpty: Boolean
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: StringFilter
  notIn: [String!]
  startsWith: String
  mode: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  in: [String!]
  not: StringFilter
  notIn: [String!]
  startsWith: String
  mode: String
  isNull: Boolean
}

input StringListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input BooleanNullableFilter {
  equals: Boolean
  not: BooleanFilter
  isNull: Boolean
}

input BooleanListFilter {
  equals: [Boolean!]
  has: Boolean
  hasEvery: [Boolean!]
  hasSome: [Boolean!]
}